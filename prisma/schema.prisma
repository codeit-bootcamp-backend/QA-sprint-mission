// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  googleId  String?    @unique
  email     String     @unique
  name      String?
  nickname  String
  image     String?
  password  String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  products  Product[]
  articles  Article[]
  favorites Favorite[]
  Comment   Comment[]
}

model Product {
  id            String     @id @default(uuid())
  name          String
  description   String
  price         Int
  tags          String[]
  images        String[]
  favoriteCount Int        @default(0)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  comments      Comment[]
  Image         Image[]
  User          User?      @relation(fields: [userId], references: [id])
  userId        Int?
  favorites     Favorite[]
}

model Article {
  id        String     @id @default(uuid())
  title     String
  content   String
  imageUrl  String?    @default("")
  likeCount Int        @default(0)
  writer    String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  comments  Comment[]
  Image     Image[]
  User      User?      @relation(fields: [userId], references: [id])
  userId    Int?
  favorites Favorite[]
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  writer    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product? @relation(fields: [productId], references: [id], onDelete: SetNull)
  productId String?
  article   Article? @relation(fields: [articleId], references: [id], onDelete: SetNull)
  articleId String?
  userId    Int
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([articleId])
}

model Image {
  id        String   @id @default(uuid())
  imagePath String
  product   Product? @relation(fields: [productId], references: [id], onDelete: SetNull)
  productId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  article   Article? @relation(fields: [articleId], references: [id], onDelete: SetNull)
  articleId String?

  @@index([productId])
  @@index([articleId])
}

model Favorite {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String?
  article   Article? @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId String?

  @@unique([userId, productId])
  @@unique([userId, articleId])
}
